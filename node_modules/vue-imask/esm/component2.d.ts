import { type InputMask, type FactoryOpts } from 'imask';
declare const _default: import("vue/types/vue").ExtendedVue<import("vue").default<Record<string, any>, Record<string, any>, never, never, (event: string, ...args: any[]) => import("vue").default<Record<string, any>, Record<string, any>, never, never, any>>, {
    maskRef?: InputMask<FactoryOpts> | undefined;
}, {
    _maskValue(): any;
    _updateValue(): void;
    _onAccept(): void;
    _onComplete(): void;
    _initMask(maskOptions?: FactoryOpts): void;
    _destroyMask(): void;
}, {
    maskOptions: FactoryOpts;
}, {
    mask: string | RegExp | import("imask").MaskedDate | typeof import("imask").Masked | typeof import("imask").MaskedPattern | import("imask").MaskedNumber | import("imask").MaskedPattern<string> | import("imask").MaskedEnum | import("imask").MaskedRange | import("imask").MaskedRegExp | import("imask").Masked<any> | DateConstructor | typeof import("imask").MaskedDate | NumberConstructor | typeof import("imask").MaskedNumber | typeof import("imask").MaskedEnum | typeof import("imask").MaskedRange | typeof import("imask").MaskedRegExp | ((value: string, masked: import("imask").Masked<any>) => boolean) | typeof import("imask").MaskedFunction | import("imask").DynamicMaskType | typeof import("imask").MaskedDynamic | import("imask").MaskedFunction<any> | import("imask").MaskedDynamic<any> | undefined;
    prepare: ((chars: string, masked: import("imask").Masked<any>, flags: import("imask").AppendFlags<import("imask").MaskedState>) => string | [string, import("imask").ChangeDetails]) | undefined;
    prepareChar: ((chars: string, masked: import("imask").Masked<any>, flags: import("imask").AppendFlags<import("imask").MaskedState>) => string | [string, import("imask").ChangeDetails]) | undefined;
    validate: ((value: string, masked: import("imask").Masked<any>, flags: import("imask").AppendFlags<import("imask").MaskedState>) => boolean) | undefined;
    commit: ((value: string, masked: import("imask").Masked<any>) => void) | undefined;
    overwrite: boolean;
    eager: undefined;
    skipInvalid: boolean;
    placeholderChar: string;
    displayChar: string;
    lazy: boolean;
    definitions: any;
    blocks: any;
    enum: unknown[];
    maxLength: number;
    from: number;
    to: number;
    pattern: string;
    format: (((value: import("../../imask/esm/masked/date").DateValue, masked: import("imask").Masked<any>) => string) & ((value: import("../../imask/esm/masked/date").DateValue, masked: import("imask").Masked<any>) => string)) | ((value: number, masked: import("imask").Masked<any>) => string) | ((value: string, masked: import("imask").Masked<any>) => string) | ((value: any, masked: import("imask").Masked<any>) => string) | undefined;
    parse: (((str: string, masked: import("imask").Masked<any>) => import("../../imask/esm/masked/date").DateValue) & ((str: string, masked: import("imask").Masked<any>) => import("../../imask/esm/masked/date").DateValue)) | ((str: string, masked: import("imask").Masked<any>) => number) | ((str: string, masked: import("imask").Masked<any>) => string) | ((str: string, masked: import("imask").Masked<any>) => any) | undefined;
    autofix: undefined;
    radix: string;
    thousandsSeparator: string;
    mapToRadix: unknown[];
    scale: number;
    normalizeZeros: boolean;
    padFractionalZeros: boolean;
    min: string | number;
    max: string | number;
    dispatch: ((appended: string, masked: import("imask").MaskedDynamic<any>, flags: import("imask").AppendFlags<import("imask").MaskedState | import("imask").MaskedDynamicState>, tail: string | String | import("imask").TailDetails) => import("imask").Masked<any> | undefined) | undefined;
    value: unknown;
    unmask: unknown;
}, {}, import("vue-demi").ComponentOptionsMixin, import("vue-demi").ComponentOptionsMixin> | undefined;
export default _default;
//# sourceMappingURL=component2.d.ts.map