import { Vue2 } from 'vue-demi';
import IMask from 'imask/esm/imask';
import props from './props.js';
import { extractOptionsFromProps } from './utils.js';

var Component2 = Vue2 == null ? void 0 : Vue2.extend({
  name: 'imask-input',
  data() {
    return {};
  },
  render(createElement) {
    const data = {
      domProps: {
        value: this.maskRef ? this.maskRef.value : this.value
      },
      on: {
        ...this.$listeners
      }
    };

    // if there is no mask use default input event
    if (!this.$props.mask) {
      data.on.input = event => this.$emit('input', event.target.value);
    } else {
      delete data.on.input;
    }
    return createElement('input', data);
  },
  mounted() {
    if (!this.$props.mask) return;
    this._initMask();
  },
  destroyed() {
    this._destroyMask();
  },
  computed: {
    maskOptions() {
      return extractOptionsFromProps(this.$props, ['value', 'unmask']);
    }
  },
  watch: {
    '$props': {
      handler(props) {
        const maskOptions = this.maskOptions;
        if (maskOptions.mask) {
          if (this.maskRef) {
            this.maskRef.updateOptions(maskOptions);
            if ('value' in props) this._updateValue();
          } else {
            this._initMask(maskOptions);
            if (props.value !== this._maskValue()) this._onAccept();
          }
        } else {
          this._destroyMask();
          if ('value' in props) this.$el.value = props.value;
        }
      },
      deep: true
    }
  },
  methods: {
    _maskValue() {
      var _this$maskRef, _this$maskRef2, _this$maskRef3;
      if (this.unmask === 'typed') return (_this$maskRef = this.maskRef) == null ? void 0 : _this$maskRef.typedValue;
      if (this.unmask) return (_this$maskRef2 = this.maskRef) == null ? void 0 : _this$maskRef2.unmaskedValue;
      return (_this$maskRef3 = this.maskRef) == null ? void 0 : _this$maskRef3.value;
    },
    _updateValue() {
      if (!this.maskRef) return;
      const value = this.value == null && this.unmask !== 'typed' ? '' : this.value;
      if (this.unmask === 'typed') this.maskRef.typedValue = value;else if (this.unmask) this.maskRef.unmaskedValue = value;else this.maskRef.value = value;
    },
    _onAccept() {
      const val = this._maskValue();
      this.$emit('input', val);
      this.$emit('accept', val);
    },
    _onComplete() {
      this.$emit('complete', this._maskValue());
    },
    _initMask(maskOptions) {
      if (!maskOptions) maskOptions = this.maskOptions;
      this.maskRef = IMask(this.$el, maskOptions).on('accept', this._onAccept.bind(this)).on('complete', this._onComplete.bind(this));
      this._updateValue();
    },
    _destroyMask() {
      if (this.maskRef) {
        this.maskRef.destroy();
        delete this.maskRef;
      }
    }
  },
  props: {
    value: {},
    unmask: {
      validator: value => value === 'typed' || typeof value === 'boolean'
    },
    ...props
  }
});

export { Component2 as default };
