import { defineComponent, toRef, watch, h } from 'vue-demi';
import props from './props.js';
import useIMask from './composable.js';
import { extractOptionsFromProps } from './utils.js';
import 'imask/esm/imask';

// order does matter = priority
const VALUE_PROPS = ['typed', 'unmasked', 'value', 'modelValue'];
var Component3 = defineComponent({
  name: 'imask-input',
  inheritAttrs: false,
  props: {
    // plugin
    modelValue: String,
    value: String,
    unmasked: String,
    typed: {
      validator: () => true
    },
    ...props
  },
  emits: ['update:modelValue', 'update:masked', 'update:value', 'update:unmasked', 'update:typed', 'accept', 'accept:value', 'accept:masked', 'accept:unmasked', 'accept:typed', 'complete', 'complete:value', 'complete:masked', 'complete:unmasked', 'complete:typed'],
  setup(props, _ref) {
    let {
      attrs,
      emit
    } = _ref;
    const {
      el,
      mask,
      masked,
      unmasked,
      typed
    } = useIMask(extractOptionsFromProps(props, VALUE_PROPS), {
      emit,
      onAccept: event => {
        // emit more events
        const v = masked.value;
        emit('accept:value', v, event);
        emit('update:value', v, event);
        emit('update:masked', v, event);
        emit('update:modelValue', v, event);
        emit('update:unmasked', unmasked.value, event);
        emit('update:typed', typed.value, event);
      },
      onComplete: event => {
        emit('complete:value', masked.value, event);
      }
    });
    const pvalue = toRef(props, 'value');
    const pmodelValue = toRef(props, 'modelValue');
    const punmasked = toRef(props, 'unmasked');
    const ptyped = toRef(props, 'typed');
    masked.value = pmodelValue.value || pvalue.value || '';
    unmasked.value = punmasked.value || '';
    typed.value = ptyped.value;
    watch(pvalue, v => masked.value = v);
    watch(pmodelValue, v => masked.value = v);
    watch(punmasked, v => unmasked.value = v);
    watch(ptyped, v => typed.value = v);
    return () => {
      // TODO type?
      const data = {
        ...attrs,
        value: props.value != null ? props.value : props.modelValue != null ? props.modelValue : mask.value ? mask.value.displayValue : '',
        ref: el
      };
      if (!props.mask) {
        data.onInput = event => {
          emit('update:modelValue', event.target.value);
          emit('update:value', event.target.value);
        };
      }
      return h('input', data);
    };
  }
});

export { Component3 as default };
