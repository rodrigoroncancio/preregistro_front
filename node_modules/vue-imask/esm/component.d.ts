declare const _default: import("vue-demi").DefineComponent<import("vue-demi").ComponentPropsOptions<import("vue-demi").Data>, {}, {}, {}, {}, import("vue-demi").ComponentOptionsMixin, import("vue-demi").ComponentOptionsMixin, {}, string, Readonly<import("vue-demi").ExtractPropTypes<string[]> | import("vue-demi").ExtractPropTypes<import("vue/types/v3-component-props").ComponentObjectPropsOptions<import("vue-demi").Data>>>, {
    [x: number]: string;
} | {}> | import("vue/types/vue").ExtendedVue<import("vue").default<Record<string, any>, Record<string, any>, never, never, (event: string, ...args: any[]) => import("vue").default<Record<string, any>, Record<string, any>, never, never, any>>, {
    maskRef?: import("../../imask/esm").InputMask<import("../../imask/esm").FactoryOpts> | undefined;
}, {
    _maskValue(): any;
    _updateValue(): void;
    _onAccept(): void;
    _onComplete(): void;
    _initMask(maskOptions?: import("../../imask/esm").FactoryOpts | undefined): void;
    _destroyMask(): void;
}, {
    maskOptions: import("../../imask/esm").FactoryOpts;
}, {
    mask: string | RegExp | import("../../imask/esm").MaskedDate | typeof import("../../imask/esm").Masked | typeof import("../../imask/esm").MaskedPattern | import("../../imask/esm").MaskedNumber | import("../../imask/esm").MaskedPattern<string> | import("../../imask/esm").MaskedEnum | import("../../imask/esm").MaskedRange | import("../../imask/esm").MaskedRegExp | import("../../imask/esm").Masked<any> | DateConstructor | typeof import("../../imask/esm").MaskedDate | NumberConstructor | typeof import("../../imask/esm").MaskedNumber | typeof import("../../imask/esm").MaskedEnum | typeof import("../../imask/esm").MaskedRange | typeof import("../../imask/esm").MaskedRegExp | ((value: string, masked: import("../../imask/esm").Masked<any>) => boolean) | typeof import("../../imask/esm").MaskedFunction | import("../../imask/esm").DynamicMaskType | typeof import("../../imask/esm").MaskedDynamic | import("../../imask/esm").MaskedFunction<any> | import("../../imask/esm").MaskedDynamic<any> | undefined;
    prepare: ((chars: string, masked: import("../../imask/esm").Masked<any>, flags: import("../../imask/esm").AppendFlags<import("../../imask/esm").MaskedState>) => string | [string, import("../../imask/esm").ChangeDetails]) | undefined;
    prepareChar: ((chars: string, masked: import("../../imask/esm").Masked<any>, flags: import("../../imask/esm").AppendFlags<import("../../imask/esm").MaskedState>) => string | [string, import("../../imask/esm").ChangeDetails]) | undefined;
    validate: ((value: string, masked: import("../../imask/esm").Masked<any>, flags: import("../../imask/esm").AppendFlags<import("../../imask/esm").MaskedState>) => boolean) | undefined;
    commit: ((value: string, masked: import("../../imask/esm").Masked<any>) => void) | undefined;
    overwrite: boolean;
    eager: undefined;
    skipInvalid: boolean;
    placeholderChar: string;
    displayChar: string;
    lazy: boolean;
    definitions: any;
    blocks: any;
    enum: unknown[];
    maxLength: number;
    from: number;
    to: number;
    pattern: string;
    format: (((value: import("../../imask/esm/masked/date").DateValue, masked: import("../../imask/esm").Masked<any>) => string) & ((value: import("../../imask/esm/masked/date").DateValue, masked: import("../../imask/esm").Masked<any>) => string)) | ((value: number, masked: import("../../imask/esm").Masked<any>) => string) | ((value: string, masked: import("../../imask/esm").Masked<any>) => string) | ((value: any, masked: import("../../imask/esm").Masked<any>) => string) | undefined;
    parse: (((str: string, masked: import("../../imask/esm").Masked<any>) => import("../../imask/esm/masked/date").DateValue) & ((str: string, masked: import("../../imask/esm").Masked<any>) => import("../../imask/esm/masked/date").DateValue)) | ((str: string, masked: import("../../imask/esm").Masked<any>) => number) | ((str: string, masked: import("../../imask/esm").Masked<any>) => string) | ((str: string, masked: import("../../imask/esm").Masked<any>) => any) | undefined;
    autofix: undefined;
    radix: string;
    thousandsSeparator: string;
    mapToRadix: unknown[];
    scale: number;
    normalizeZeros: boolean;
    padFractionalZeros: boolean;
    min: string | number;
    max: string | number;
    dispatch: ((appended: string, masked: import("../../imask/esm").MaskedDynamic<any>, flags: import("../../imask/esm").AppendFlags<import("../../imask/esm").MaskedState | import("../../imask/esm").MaskedDynamicState>, tail: string | String | import("../../imask/esm").TailDetails) => import("../../imask/esm").Masked<any> | undefined) | undefined;
    value: unknown;
    unmask: unknown;
}, {}, import("vue-demi").ComponentOptionsMixin, import("vue-demi").ComponentOptionsMixin> | undefined;
export default _default;
//# sourceMappingURL=component.d.ts.map