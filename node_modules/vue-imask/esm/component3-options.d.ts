import { type InputMask, type FactoryOpts } from 'imask';
import { type PropType } from 'vue-demi';
export type MaskProps = FactoryOpts & {
    modelValue: string;
    value: string;
    unmasked: string;
    typed: any;
};
type ComponentValueProp = typeof VALUE_PROPS[number];
type MaskValueProp = 'value' | 'unmaskedValue' | 'typedValue';
declare const VALUE_PROPS: readonly ["typed", "unmasked", "value", "modelValue"];
declare const _default: import("vue-demi").DefineComponent<{
    mask: PropType<string | RegExp | import("imask").MaskedDate | typeof import("imask").Masked | typeof import("imask").MaskedPattern | import("imask").MaskedNumber | import("imask").MaskedPattern<string> | import("imask").MaskedEnum | import("imask").MaskedRange | import("imask").MaskedRegExp | import("imask").Masked<any> | DateConstructor | typeof import("imask").MaskedDate | NumberConstructor | typeof import("imask").MaskedNumber | typeof import("imask").MaskedEnum | typeof import("imask").MaskedRange | typeof import("imask").MaskedRegExp | ((value: string, masked: import("imask").Masked<any>) => boolean) | typeof import("imask").MaskedFunction | import("imask").DynamicMaskType | typeof import("imask").MaskedDynamic | import("imask").MaskedFunction<any> | import("imask").MaskedDynamic<any> | undefined>;
    prepare: PropType<((chars: string, masked: import("imask").Masked<any>, flags: import("imask").AppendFlags<import("imask").MaskedState>) => string | [string, import("imask").ChangeDetails]) | undefined>;
    prepareChar: PropType<((chars: string, masked: import("imask").Masked<any>, flags: import("imask").AppendFlags<import("imask").MaskedState>) => string | [string, import("imask").ChangeDetails]) | undefined>;
    validate: PropType<((value: string, masked: import("imask").Masked<any>, flags: import("imask").AppendFlags<import("imask").MaskedState>) => boolean) | undefined>;
    commit: PropType<((value: string, masked: import("imask").Masked<any>) => void) | undefined>;
    overwrite: {
        type: BooleanConstructor;
        required: boolean;
        default: undefined;
    };
    eager: {
        required: boolean;
        default: undefined;
        validator: (value: unknown) => boolean;
    };
    skipInvalid: {
        type: BooleanConstructor;
        required: boolean;
        default: undefined;
    };
    placeholderChar: StringConstructor;
    displayChar: StringConstructor;
    lazy: {
        type: BooleanConstructor;
        required: boolean;
        default: undefined;
    };
    definitions: ObjectConstructor;
    blocks: ObjectConstructor;
    enum: ArrayConstructor;
    maxLength: NumberConstructor;
    from: NumberConstructor;
    to: NumberConstructor;
    pattern: StringConstructor;
    format: PropType<(((value: import("../../imask/esm/masked/date").DateValue, masked: import("imask").Masked<any>) => string) & ((value: import("../../imask/esm/masked/date").DateValue, masked: import("imask").Masked<any>) => string)) | ((value: number, masked: import("imask").Masked<any>) => string) | ((value: string, masked: import("imask").Masked<any>) => string) | ((value: any, masked: import("imask").Masked<any>) => string) | undefined>;
    parse: PropType<(((str: string, masked: import("imask").Masked<any>) => import("../../imask/esm/masked/date").DateValue) & ((str: string, masked: import("imask").Masked<any>) => import("../../imask/esm/masked/date").DateValue)) | ((str: string, masked: import("imask").Masked<any>) => number) | ((str: string, masked: import("imask").Masked<any>) => string) | ((str: string, masked: import("imask").Masked<any>) => any) | undefined>;
    autofix: {
        required: boolean;
        default: undefined;
        validator: (value: unknown) => boolean;
    };
    radix: StringConstructor;
    thousandsSeparator: StringConstructor;
    mapToRadix: ArrayConstructor;
    scale: NumberConstructor;
    normalizeZeros: {
        type: BooleanConstructor;
        required: boolean;
        default: undefined;
    };
    padFractionalZeros: {
        type: BooleanConstructor;
        required: boolean;
        default: undefined;
    };
    min: (DateConstructor | NumberConstructor)[];
    max: (DateConstructor | NumberConstructor)[];
    dispatch: PropType<((appended: string, masked: import("imask").MaskedDynamic<any>, flags: import("imask").AppendFlags<import("imask").MaskedState | import("imask").MaskedDynamicState>, tail: string | String | import("imask").TailDetails) => import("imask").Masked<any> | undefined) | undefined>;
    modelValue: StringConstructor;
    value: StringConstructor;
    unmasked: StringConstructor;
    typed: PropType<any>;
}, {}, {
    maskRef?: InputMask<FactoryOpts> | undefined;
}, {
    maskOptions(): FactoryOpts;
}, {
    _getMaskProps(): [ComponentValueProp, MaskValueProp];
    _getComponentMaskProp(): ComponentValueProp;
    _getMaskPropFromComponent(componentProp: ComponentValueProp): MaskValueProp;
    _updateValue(): void;
    _onAccept(): void;
    _onComplete(): void;
    _initMask(): void;
    _destroyMask(): void;
}, import("vue-demi").ComponentOptionsMixin, import("vue-demi").ComponentOptionsMixin, ("accept" | "complete" | "accept:typed" | "complete:typed" | "accept:unmasked" | "complete:unmasked" | "update:modelValue" | "update:value" | "update:unmasked" | "update:typed" | "accept:value" | "complete:value")[], string, Readonly<import("vue-demi").ExtractPropTypes<{
    mask: PropType<string | RegExp | import("imask").MaskedDate | typeof import("imask").Masked | typeof import("imask").MaskedPattern | import("imask").MaskedNumber | import("imask").MaskedPattern<string> | import("imask").MaskedEnum | import("imask").MaskedRange | import("imask").MaskedRegExp | import("imask").Masked<any> | DateConstructor | typeof import("imask").MaskedDate | NumberConstructor | typeof import("imask").MaskedNumber | typeof import("imask").MaskedEnum | typeof import("imask").MaskedRange | typeof import("imask").MaskedRegExp | ((value: string, masked: import("imask").Masked<any>) => boolean) | typeof import("imask").MaskedFunction | import("imask").DynamicMaskType | typeof import("imask").MaskedDynamic | import("imask").MaskedFunction<any> | import("imask").MaskedDynamic<any> | undefined>;
    prepare: PropType<((chars: string, masked: import("imask").Masked<any>, flags: import("imask").AppendFlags<import("imask").MaskedState>) => string | [string, import("imask").ChangeDetails]) | undefined>;
    prepareChar: PropType<((chars: string, masked: import("imask").Masked<any>, flags: import("imask").AppendFlags<import("imask").MaskedState>) => string | [string, import("imask").ChangeDetails]) | undefined>;
    validate: PropType<((value: string, masked: import("imask").Masked<any>, flags: import("imask").AppendFlags<import("imask").MaskedState>) => boolean) | undefined>;
    commit: PropType<((value: string, masked: import("imask").Masked<any>) => void) | undefined>;
    overwrite: {
        type: BooleanConstructor;
        required: boolean;
        default: undefined;
    };
    eager: {
        required: boolean;
        default: undefined;
        validator: (value: unknown) => boolean;
    };
    skipInvalid: {
        type: BooleanConstructor;
        required: boolean;
        default: undefined;
    };
    placeholderChar: StringConstructor;
    displayChar: StringConstructor;
    lazy: {
        type: BooleanConstructor;
        required: boolean;
        default: undefined;
    };
    definitions: ObjectConstructor;
    blocks: ObjectConstructor;
    enum: ArrayConstructor;
    maxLength: NumberConstructor;
    from: NumberConstructor;
    to: NumberConstructor;
    pattern: StringConstructor;
    format: PropType<(((value: import("../../imask/esm/masked/date").DateValue, masked: import("imask").Masked<any>) => string) & ((value: import("../../imask/esm/masked/date").DateValue, masked: import("imask").Masked<any>) => string)) | ((value: number, masked: import("imask").Masked<any>) => string) | ((value: string, masked: import("imask").Masked<any>) => string) | ((value: any, masked: import("imask").Masked<any>) => string) | undefined>;
    parse: PropType<(((str: string, masked: import("imask").Masked<any>) => import("../../imask/esm/masked/date").DateValue) & ((str: string, masked: import("imask").Masked<any>) => import("../../imask/esm/masked/date").DateValue)) | ((str: string, masked: import("imask").Masked<any>) => number) | ((str: string, masked: import("imask").Masked<any>) => string) | ((str: string, masked: import("imask").Masked<any>) => any) | undefined>;
    autofix: {
        required: boolean;
        default: undefined;
        validator: (value: unknown) => boolean;
    };
    radix: StringConstructor;
    thousandsSeparator: StringConstructor;
    mapToRadix: ArrayConstructor;
    scale: NumberConstructor;
    normalizeZeros: {
        type: BooleanConstructor;
        required: boolean;
        default: undefined;
    };
    padFractionalZeros: {
        type: BooleanConstructor;
        required: boolean;
        default: undefined;
    };
    min: (DateConstructor | NumberConstructor)[];
    max: (DateConstructor | NumberConstructor)[];
    dispatch: PropType<((appended: string, masked: import("imask").MaskedDynamic<any>, flags: import("imask").AppendFlags<import("imask").MaskedState | import("imask").MaskedDynamicState>, tail: string | String | import("imask").TailDetails) => import("imask").Masked<any> | undefined) | undefined>;
    modelValue: StringConstructor;
    value: StringConstructor;
    unmasked: StringConstructor;
    typed: PropType<any>;
}>>, {
    overwrite: boolean;
    eager: undefined;
    skipInvalid: boolean;
    autofix: undefined;
    lazy: boolean;
    normalizeZeros: boolean;
    padFractionalZeros: boolean;
}>;
export default _default;
//# sourceMappingURL=component3-options.d.ts.map